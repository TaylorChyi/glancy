.container {
  /*
   * 背景：需要与释义面板共享宽度比例，确保 docker 栏内组件节奏统一。
   * 取舍：优先消费 Layout 集中下发的 --docker-row-width/--docker-row-max-width，
   *       既保证搜索态与动作态的等宽，又在脱离 docker 时回落到 SearchBox 默认宽度。
   */
  width: var(--docker-row-width, min(100%, var(--sb-max-width)));
  display: flex;
  justify-content: center;
  max-width: var(--docker-row-max-width, var(--sb-max-width));
  margin-inline: auto;
}

.input-wrapper {
  width: 100%;
}

/*
 * 结构说明：SearchBox 维持统一的视觉壳层，此处通过 grid 划分语言、分隔符、文本与动作槽位。
 *  - 桌面端：四列横向排列，并以 column-gap 继承 searchbox 的节奏感。
 *  - 窄屏：降级为单列栈结构，divider 退化为横向描边，完全移除 flex-wrap 带来的换行抖动。
 */
.input-surface {
  /*
   * 背景：底部输入区需与侧边栏保持同一面板色调，避免跨页面底部区域割裂。
   * 取舍：优先读取 --sidebar-panel / --sidebar-hover-bg，缺省时回落到 SearchBox 内建 token，
   *       以免影响未来复用 SearchBox 的其它场景。
   */
  --sb-bg: var(--sidebar-panel, var(--sb-surface));
  --sb-bg-hover: var(
    --sidebar-hover-bg,
    color-mix(in srgb, var(--sidebar-panel, var(--sb-surface)) 94%, white 6%)
  );
  --sb-shell-width: 100%;
  --padding-y: 0;
  --slot-gap: 0;

  display: grid;
  grid-template-columns:
    auto
    var(--chat-input-divider-width, 1px)
    minmax(0, 1fr)
    auto;
  grid-template-areas: "language divider text action";
  align-items: stretch;
  column-gap: var(--chat-input-inline-gap, var(--chat-input-bottom-gap, 12px));
}

.input-surface[data-language-visible="false"] {
  grid-template-columns: minmax(0, 1fr) auto;
  grid-template-areas: "text action";
}

.language-slot {
  grid-area: language;
  display: flex;
  align-items: center;
  min-width: 0;
  padding-block: var(--chat-input-bottom-pad-y, 12px);
}

.language-slot[data-visible="false"] {
  display: none;
}

.input-divider {
  grid-area: divider;
  width: var(--chat-input-divider-width, 1px);
  background: var(--chat-input-divider-color, var(--sb-divider));
  border-radius: 999px;
  align-self: stretch;
}

.input-surface[data-language-visible="false"] .input-divider {
  display: none;
}

.text-slot {
  grid-area: text;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding-block: var(--chat-input-top-pad-y, 16px);
  min-width: 0;
}

.action-slot {
  grid-area: action;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  padding-block: var(--chat-input-bottom-pad-y, 12px);
}

@media (width <= 640px) {
  .input-surface {
    grid-template-columns: minmax(0, 1fr);
    grid-template-areas:
      "text"
      "divider"
      "language"
      "action";
    row-gap: var(--chat-input-mobile-gap, var(--chat-input-bottom-gap, 12px));
  }

  .input-surface[data-language-visible="false"] {
    grid-template-columns: minmax(0, 1fr);
    grid-template-areas:
      "text"
      "action";
  }

  .input-divider {
    width: 100%;
    height: var(--chat-input-divider-width, 1px);
  }

  .input-surface[data-language-visible="false"] .input-divider {
    display: none;
  }

  .language-slot {
    padding-block-start: 0;
  }
}

.language-shell {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: var(--seg-h, 44px);
  padding-inline: var(--seg-pad-x, 20px);
  gap: var(--seg-arrow-gap, 12px);
  border-radius: var(--seg-r, 22px);
  color: var(--sb-text);
  font-size: var(--seg-font-size, 14px);
  font-weight: var(--seg-font-weight, 600);
  letter-spacing: var(--seg-letter-space, 0.04em);
  text-transform: uppercase;
  text-align: center;
  flex-shrink: 0;

  /*
   * 层级策略：通过透明壳体与排版节奏维持区块识别，依赖文字/焦点状态提供层级反馈；
   * 若未来需要更强的分割感，可在不破坏 hover/焦点节奏的前提下重新评估描边策略。
   */
  transition:
    background-color 0.2s ease,
    box-shadow 0.2s ease;
}

.language-shell:hover {
  /*
   * 交互取舍：改以文字色与透明壳体的对比提供悬停反馈，避免描边重现导致的视觉噪声。
   */
}

.language-shell:focus-within {
  box-shadow: var(--ring-focus);
}

.language-arrow,
.language-swap {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  padding-inline: var(--seg-arrow-gap, 12px);
  border: none;
  border-radius: calc(var(--seg-r, 22px) - 6px);
  background: transparent;
  color: inherit;
  font-size: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  text-transform: inherit;
}

.language-arrow {
  cursor: default;
}

.language-swap {
  cursor: pointer;
  transition:
    background-color 0.2s ease,
    transform 0.2s ease;
}

.language-swap:hover {
  background: color-mix(in srgb, var(--sb-seg) 85%, white 15%);
}

.language-swap:focus-visible {
  outline: none;
  box-shadow: var(--ring-focus);
}

.language-swap:active {
  transform: scale(0.96);
}

.core-input {
  flex: 1 1 auto;
  min-width: 0;
  display: flex;
  align-items: center;
}

.textarea {
  width: 100%;
  padding: 0;
  margin: 0;
  border: none;
  background: transparent;
  color: var(--sb-text);
  font-size: var(--ph-size, 16px);
  font-weight: var(--ph-weight, 500);
  line-height: 1.5;
  letter-spacing: 0.01em;
  resize: none;
  outline: none;
  caret-color: var(--sb-icon);
}

.textarea::placeholder {
  color: var(--sb-muted);
}

.action-button {
  margin-inline-start: auto;
  flex-shrink: 0;
  display: grid;
  place-items: center;
  inline-size: var(--btn-action, 44px);
  block-size: var(--btn-action, 44px);
  width: var(--btn-action, 44px);
  height: var(--btn-action, 44px);
  border: none;
  border-radius: 999px;

  /*
   * 背景：按钮已移除实心壳体，仍保留变量以便未来扩展描边/阴影等表现时复用统一入口。
   */
  --action-btn-bg: transparent;
  --action-btn-color: var(--sb-action-icon, var(--sb-icon));
  --action-btn-shadow: none;

  background: var(--action-btn-bg);
  color: var(--action-btn-color);
  box-shadow: var(--action-btn-shadow);
  cursor: pointer;
  transition:
    color 0.2s ease,
    outline-color 0.2s ease,
    outline-width 0.2s ease,
    transform 0.2s ease,
    background-color 0.2s ease,
    box-shadow 0.2s ease;
  outline: 1px solid transparent;
  outline-offset: 2px;
}

.action-button:hover {
  color: color-mix(in srgb, var(--sb-icon) 82%, white 18%);
}

.action-button:focus-visible {
  outline: 2px solid
    var(--sb-cta-outline, color-mix(in srgb, var(--sb-icon) 72%, white 28%));
}

.action-button:active {
  transform: scale(0.98);
}

.action-button[disabled] {
  cursor: not-allowed;
  opacity: 0.5;
  color: var(--sb-muted-icon, currentColor);
}

.action-button-send {
  --action-btn-color: var(--sb-send-color);
}

.action-button-voice {
  --action-btn-color: var(
    --sb-voice-color,
    var(--sb-action-icon, var(--sb-icon))
  );
}

.action-button-voice[aria-pressed="true"] {
  color: var(
    --sb-cta-icon-active,
    color-mix(in srgb, var(--sb-cta-icon) 65%, white 35%)
  );
  outline: 2px solid
    var(
      --sb-cta-outline-active,
      color-mix(in srgb, var(--sb-cta-icon) 60%, white 40%)
    );
}

.action-button-icon {
  width: 18px;
  height: 18px;
  display: block;
  color: inherit;
}

.submit-proxy {
  position: absolute;
  width: 0;
  height: 0;
  padding: 0;
  margin: 0;
  border: 0;
  opacity: 0;
  pointer-events: none;
}
