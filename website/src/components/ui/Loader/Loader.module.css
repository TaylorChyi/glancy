.loader {
  display: grid;
  place-items: center;
  inline-size: 100%;
  min-block-size: var(--vh);
  padding: var(--space-4);
  background: transparent;

  /*
   * 背景：等待动画需改为缩放渐隐效果，避免出现底色遮挡与突兀闪烁。
   * 取舍：沿用三帧序列，通过统一变量控制时长与缩放范围，保持素材可插拔。
   */
  --waiting-frame-max-width: calc(var(--space-5) * 9);
  --waiting-frame-scale-rest: 0.92;
  --waiting-frame-scale-active: 1;
  --waiting-frame-scale-peak: 1.04;
}

.symbol {
  position: relative;
  inline-size: min(
    80vw,
    var(--waiting-frame-max-width),
    calc(var(--waiting-frame-aspect-ratio) * var(--waiting-frame-height))
  );
  block-size: var(--waiting-frame-height);
  aspect-ratio: var(--waiting-frame-aspect-ratio);
  display: grid;
  place-items: center;

  /*
   * 设计对齐：等待动画素材需裸呈不带底板，因此移除背景、圆角、阴影等装饰性元素。
   * 影响：后续若需恢复容器化呈现，可改为引入独立包裹层，避免污染素材本身。
   * 等高策略：通过 height 自定义属性约束容器尺寸，确保三帧素材在任何节奏下保持绝对高度一致。
   */
  background: none;
  border: none;
  box-shadow: none;
  border-radius: 0;
  isolation: isolate;
}

.frame {
  position: absolute;
  top: 50%;
  left: 50%;
  inline-size: auto;
  block-size: 100%;
  max-inline-size: calc(var(--waiting-frame-aspect-ratio) * var(--waiting-frame-height));
  display: block;
  object-fit: contain;
  opacity: 0;

  /* 通过缩放 + 透明度营造柔和的呼吸节奏，降低帧切换突兀感。 */
  animation-name: waiting-animation-frame;
  animation-duration: var(--waiting-animation-duration, 4.5s);
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-fill-mode: both;
  animation-delay: var(--waiting-frame-delay, 0ms);
  transform-origin: center;

  /*
   * 居中策略：利用 50% 位移 + translate 校准基准，配合高度自适应保证三帧素材等高无拉伸。
   */
  transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-rest));
  will-change: opacity, transform;
}

@keyframes waiting-animation-frame {
  0% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-rest));
  }

  8% {
    opacity: 0.45;
    transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-rest));
  }

  16% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-active));
  }

  26% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-peak));
  }

  33.333% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-active));
  }

  100% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(var(--waiting-frame-scale-rest));
  }
}

.label {
  position: absolute;
  inline-size: 1px;
  block-size: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@media (width <= 480px) {
  .symbol {
    inline-size: min(
      90vw,
      calc(var(--space-5) * 7),
      calc(var(--waiting-frame-aspect-ratio) * var(--waiting-frame-height))
    );
  }
}
