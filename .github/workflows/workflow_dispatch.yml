name: Deploy Website (diag first)

on:
  push:
    branches: [main, 'feature-*']
    paths:
      - 'website/glancy-website/**'
  workflow_dispatch: {}   # 允许手动触发便于复现

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    # ⚠️ 注意：不要在这里用 defaults.run.working-directory 引用表达式（见常见坑）
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: DIAG 1 - 打印关键环境与仓库根结构
        shell: bash
        run: |
          set -euxo pipefail
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "REPO CONTENTS (depth 2):"
          find "$GITHUB_WORKSPACE" -maxdepth 2 -type d -print | sed "s|$GITHUB_WORKSPACE|.|"

      - name: DIAG 2 - 打印自定义变量 & 期望路径是否存在
        shell: bash
        env:
          WEBSITE_DIR: ${{ github.workspace }}/website/glancy-website
        run: |
          set -euxo pipefail
          echo "WEBSITE_DIR=$WEBSITE_DIR"
          echo "ls -la $WEBSITE_DIR (如果不存在会失败)"
          if [ -d "$WEBSITE_DIR" ]; then
            ls -la "$WEBSITE_DIR"
          else
            echo "❌ 期望目录不存在：$WEBSITE_DIR"
            echo "🔎 在仓库内搜索 glancy-website 目录（深度3）"
            find "$GITHUB_WORKSPACE" -maxdepth 3 -type d -name "glancy-website" -print || true
            exit 66
          fi

      - name: DIAG 3 - 验证 working-directory 相对路径是否会出错（不影响后续）
        shell: bash
        working-directory: glancy-website   # 故意少一层，观察是否复现你报错
        continue-on-error: true             # 即使失败也继续
        run: |
          set -euxo pipefail
          echo "PWD should be repo_root/glancy-website -> 实际是："
          pwd
          ls -la || true

      - name: DIAG 4 - 验证正确的 working-directory（不影响后续）
        shell: bash
        working-directory: website/glancy-website
        continue-on-error: true
        run: |
          set -euxo pipefail
          echo "PWD should be repo_root/website/glancy-website -> 实际是："
          pwd
          ls -la | head -n 50 || true

      # ↑ 上面4个 DIAG 步骤运行完，再继续你原来的 Node 安装/构建/上传步骤
      # （如果你愿意，等我们看完日志再恢复构建与部署步骤也行）